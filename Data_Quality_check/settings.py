"""
Django settings for Data_Quality_check project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^4==b%chdpx%ef#0lsc7bwhesx#9wn13@i&2@se5h_z%fhgikr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Quality_Check_App',
    'Data_Transfer_App',
    'defender', #Defender app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'defender.middleware.FailedLoginMiddleware', # Defender middleware

]

# If you're using Redis, ensure that this setting is correct
DEFENDER_REDIS_URL = 'redis://localhost:6379/0'  # Update with your Redis host and port if needed

ROOT_URLCONF = 'Data_Quality_check.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'shared' / 'templates',  # Global templates directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Data_Quality_check.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    #  'metadata_db': {
    #     'ENGINE': 'django.db.backends.mysql',  # MySQL engine
    #     'NAME': 'dq',
    #     'USER': 'root',
    #     'PASSWORD': 'Nana@8055#',
    #     'HOST': 'localhost',
    #     'PORT': 3306,
    #     'OPTIONS': {},  # Optional extra parameters
    # },
     'metadata_db': {
        'ENGINE': 'django.db.backends.mysql',  # MySQL engine
        'NAME': 'dq',
        'USER': 'admin',
        'PASSWORD': 'Apexon121124',
        'HOST': 'dq-source-db.cby4ges6cu0v.us-east-1.rds.amazonaws.com',
        'PORT': 3306,
        # 'OPTIONS': {},  # Optional extra parameters
    },
    'source_db': { # We can change the configuration to connect to any other database
        'ENGINE': 'django.db.backends.postgresql',  # PostgreSQL engine
        'NAME': 'source_database',
        'USER': 'source_user',
        'PASSWORD': 'source_password',
        'HOST': 'source_host',
        'PORT': 5432,
        'OPTIONS': {},  # Optional extra parameters
    },
    'target_db': {
        'ENGINE': 'sql_server.pyodbc',  # MSSQL engine (via ODBC)
        'NAME': 'target_database',
        'USER': 'target_user',
        'PASSWORD': 'target_password',
        'HOST': 'target_host',
        'PORT': 1433,
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',  # Required for MSSQL
            'extra_params': 'TrustServerCertificate=yes;',
        },
    },
    
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom Settings

STATIC_URL = '/static/'

# Directory to collect static files when running `python manage.py collectstatic`
STATICFILES_DIRS = [
    BASE_DIR / 'shared' / 'static',
  # Global static directory
]

# Static files from each app (if any)
STATIC_ROOT = BASE_DIR / 'staticfiles'

# To enable the static files handling in development
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

handler404 = 'Quality_Check_App.views.custom_page_not_found'
